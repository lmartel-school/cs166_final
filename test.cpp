#include <iostream>#include <algorithm>#include <array>#include <random>#include <chrono>#include <assert.h>#include <time.h>#include <iomanip>#include "splay_tree.h"#include "rope.h"using namespace std;void testSplayTree(){	for (int size = 0; size <= 150; size++) {		cout << "Testing size " << size << endl;		vector<int> keys;		vector<string *> values;		for (int i = 0; i < size; i++){			keys.push_back(i);			values.push_back(new string(""));		}		// unsigned seed = chrono::system_clock::now().time_since_epoch().count();		random_shuffle(keys.begin(), keys.end());// , default_random_engine(seed));		assert((new SplayTree(keys, values))->isValidBinaryTree());	}}string *s(string & str){	return new string(str);}string *s(const char str[]){	return new string(str);}void manualRopeTests(){	Rope *rope = new Rope();	rope = rope->insert(0, s("PLEASE WORK"));	// cout << rope->toString() << endl;	assert(rope->at(2) == 'E');	// cout << "found:" << rope->report(0, 3) << endl;	assert(rope->report(0, 3) == "PLE");	rope = rope->remove(4, 9);	// cout << "update:" << rope->toString() << endl;	assert(rope->report(0, 5) == "PLEAK");	// cout << "update:" << rope->toString() << endl;	rope = rope->insert(4, s("WOR"));	rope = rope->insert(4, s("SE "));	rope = rope->insert(rope->length(), s(", BITCH"));	// cout << "update:" << rope->toString() << endl;	assert(rope->report(0, rope->length()) == "PLEASE WORK, BITCH");}#define BIG_LEN 10000void manualBigRopeTest(){	Rope *rope = new Rope();	for (int i = 0; i < BIG_LEN; i++){		rope = rope->insert(0, s("FOOBAR"));	}	assert(rope->length() == BIG_LEN * 6);	cout << rope->report(0, BIG_LEN * 6) << endl;}void automatedRopeTests(){	Rope *rope = new Rope();	for (int i = 0; i < BIG_LEN; i++){		int fragLen = rand() % 10 + 1;		string frag;		for (int j = 0; j < fragLen; j++) frag += 'a' + (int)(rand() % 26);		rope = rope->insert(rand() % (rope->length() + 1), s(frag));		// cout << rope->report(0, rope->length()) << endl;		// cout << rope->toString() << endl;	}	cout << rope->report(0, rope->length()) << endl;	cout << rope->toString() << endl;	cout << rope->length() << endl;}void frontInsertionBenchmarkRope(int n){	int timer = clock();	Rope *rope = new Rope();	for (int i = 0; i < n; i++){		rope = rope->insert(0, s("FOOBAR"));	}	cout << float(clock() - timer) / CLOCKS_PER_SEC << ',';	assert(rope->length() == n * 6);}void frontInsertionBenchmarkString(int n){	int timer = clock();	string str;	for (int i = 0; i < n; i++){		str.insert(0, "FOOBAR");	}	cout << float(clock() - timer) / CLOCKS_PER_SEC;	assert(str.length() == n * 6);}void repeatedConcatBenchmarkRope(int n){	int timer = clock();	Rope *rope = new Rope();	for (int i = 0; i < n; i++){		rope = rope->insert(rope->length(), s("FOOBAR"));	}	cout << float(clock() - timer) / CLOCKS_PER_SEC << ',';	assert(rope->length() == n * 6);}void repeatedConcatBenchmarkString(int n){	int timer = clock();	string str;	for (int i = 0; i < n; i++){		str += "FOOBAR";	}	cout << float(clock() - timer) / CLOCKS_PER_SEC;	assert(str.length() == n * 6);}void randomAccessBenchmarkRope(int n, int i){	Rope *rope = new Rope();	for (int i = 0; i < n; i++){		rope = rope->insert(0, s("FOOBAR"));	}	int timer = clock();	rope->at(i);	cout << float(clock() - timer) / CLOCKS_PER_SEC << ',';	assert(rope->length() == n * 6);}void randomAccessBenchmarkString(int n, int i){	string str;	for (int i = 0; i < n; i++){		str += "FOOBAR";	}	int timer = clock();	str.at(i);	cout << float(clock() - timer) / CLOCKS_PER_SEC;	assert(str.length() == n * 6);}#define HUGE_LEN 10000000#define MAX_LEN 500000000#define PRETTY_BIG_LEN 10000000int main (int argc, char *argv[]) {	// testSplayTree();	// manualRopeTests();	// manualBigRopeTest();	// automatedRopeTests(); // TODO make pass	cout << "All tests passed." << endl;	cout << "Starting benchmarks." << endl;	cout << fixed << showpoint << setprecision(8);	/*	cout << "number of front-insertions,rope runtime (sec),c++ string runtime (sec)" << endl;	bool odd = true;	for (int i = 1; i < MAX_LEN; odd ? i *= 5 : i *= 2, odd = !odd){		cout << i << ',';		frontInsertionBenchmarkRope(i);		if (i < HUGE_LEN / 2){			frontInsertionBenchmarkString(i);		} else cout << "timeout";		cout << endl;	}		cout << "number of rear-appends,rope runtime (sec),c++ string runtime (sec)" << endl;	bool odd = true;	for (int i = 1; i < MAX_LEN; odd ? i *= 5 : i *= 2, odd = !odd){		cout << i << ',';		repeatedConcatBenchmarkRope(i);		repeatedConcatBenchmarkString(i);		cout << endl;	}		cout << "random access in string of size,rope runtime (sec),c++ string runtime (sec)" << endl;	bool odd = true;	for (int i = 1; i < MAX_LEN; odd ? i *= 5 : i *= 2, odd = !odd){		cout << i << ',';		int r = rand() % (i * 6);		if (i <= 1000000) randomAccessBenchmarkRope(i, r);		else cout << ',';		randomAccessBenchmarkString(i, r);		cout << endl;	}	*/	Rope *rope = new Rope();	for (int i = 0; i < PRETTY_BIG_LEN; i++){		rope = rope->insert(0, s("FOOBAR"));	}	string str;	for (int i = 0; i < PRETTY_BIG_LEN; i++){		str += "FOOBAR";	}	bool odd = true;	cout << "substring of size n in string of size " << PRETTY_BIG_LEN << ",rope runtime (sec),c++ string runtime (sec)" << endl;	for (int i = 1; i <= PRETTY_BIG_LEN; odd ? i *= 5 : i *= 2, odd = !odd){		cout << i << ',';		int timer = clock();		if (i <= 5000000) rope->report(0, i);		cout << float(clock() - timer) / CLOCKS_PER_SEC << ',';		timer = clock();		str.substr(0, i);		cout << float(clock() - timer) / CLOCKS_PER_SEC;		cout << endl;	}}